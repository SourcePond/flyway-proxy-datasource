group 'ch.sourcepond.jdbc'
version '0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'com.github.lburgazzoli.karaf'
apply plugin: 'net.researchgate.release'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'org.sonarqube'

sourceCompatibility = 1.8

ext {
    osgiVersion = '6.0.0'
    paxExamVersion = '4.11.0'
    logbackVersion = '1.1.3'
    byteBuddyVersion = '1.8.12'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.flywaydb:flyway-core:5.1.3'
    compileOnly 'org.osgi:osgi.core:6.0.0'
    compileOnly 'org.slf4j:slf4j-api:1.7.25'

    testCompile "org.ops4j.pax.exam:pax-exam-container-native:$paxExamVersion"
    testCompile "org.ops4j.pax.exam:pax-exam-junit4:$paxExamVersion"
    testCompile "org.ops4j.pax.exam:pax-exam-link-mvn:$paxExamVersion"
    testCompile "org.ops4j.pax.url:pax-url-aether:2.5.4"
    testCompile "org.apache.felix:org.apache.felix.framework:5.6.10"
    testCompile "ch.qos.logback:logback-core:$logbackVersion"
    testCompile "ch.qos.logback:logback-classic:$logbackVersion"
    testCompile 'javax.inject:javax.inject:1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.19.0'
    testCompile 'org.objenesis:objenesis:2.6'
    testCompile "net.bytebuddy:byte-buddy:$byteBuddyVersion"
    testCompile "net.bytebuddy:byte-buddy-agent:$byteBuddyVersion"
    testCompile 'com.h2database:h2:1.4.197'
}

jar {
    manifest {
        attributes('Bundle-Activator': 'ch.sourcepond.jdbc.flyway.Activator')
    }
}

karaf {
    features {
        xsdVersion = '1.4.0'
        version = project.version
        description = "Repository for $project.name"
        name = "${project.group}.${project.name}"

        includeProject = true

        feature {
            name = project.name
            version = project.version
            description = project.description

            bundle('org.flywaydb') {
                attribute 'start-level', '15'
            }

            bundle('ch.sourcepond.jdbc') {
                attribute 'start-level', '15'
            }
        }
    }
}

// ------ Testing tasks ------

task generateDependsFile {
    // In order to fully use org.ops4j.pax.exam.CoreOptions.maven() stuff
    // we need to generate a META-INF/maven/dependencies.properties file
    // just like the generate-depends-file Maven goal from ServiceMix/Karaf

    File outputFileDir = project.file("${project.buildDir}/classes/java/test/META-INF/maven/")
    File outputFile = new File(outputFileDir, 'dependencies.properties')

    outputs.file outputFile

    doFirst {
        outputFileDir.mkdirs()

        Properties properties = new Properties();

        // first we add our GAV info
        properties.setProperty("groupId", "${project.group}");
        properties.setProperty("artifactId", project.name);
        properties.setProperty("version", "${project.version}");
        properties.setProperty("${project.group}/${project.name}/version", "${project.version}");

        // then for all our deps
        project.configurations.testCompile.resolvedConfiguration.resolvedArtifacts.each {
            final String keyBase = it.moduleVersion.id.group + '/' + it.moduleVersion.id.name;
            properties.setProperty("${keyBase}/scope", "compile")
            properties.setProperty("${keyBase}/type", it.extension)
            properties.setProperty("${keyBase}/version", it.moduleVersion.id.version)

            if (it.classifier) {
                properties.setProperty("${keyBase}/classifier", it.classifier)
            }
        }

        FileOutputStream outputStream = new FileOutputStream(outputFile);
        try {
            properties.store(outputStream, "Generated from Gradle by Hibernate build for PaxExam testing of hibernate-osgi module")
        }
        finally {
            outputStream.close()
        }
    }
}

task copyIntegrationTestArtifacts(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into 'build/paxexam'
    rename { String fileName ->
        "examinee.jar"
    }
}

// ------ OSSRH Tasks ------

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

task signPom(type: Sign) {
    sign file('build/publications/mavenJava/pom-default.xml')
    outputs.upToDateWhen { false }  // the signing plugin does not seem to notice
    // it when the publications folder with the
    // signature has been deleted. So we always
    // create a new signature
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    repositories {
        maven {
            url "${project.version.endsWith('-SNAPSHOT') ? ossrhSnapshotUrl : ossrhReleaseUrl}"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(source: "$buildDir/karaf/features/$project.name-${project.version}.xml", classifier: 'features') {
                builtBy tasks.build
            }
            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    if (it.file.name.endsWith('.xml.asc')) {
                        classifier = 'features'
                        extension = 'xml.asc'
                    } else {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
            project.tasks.signPom.signatureFiles.each {
                artifact(it) {
                    extension = 'pom.asc'
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

test {
    outputs.upToDateWhen { false }
    dependsOn(assemble, generateDependsFile, copyIntegrationTestArtifacts)
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.withType(Sign)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.withType(Sign)
    }
    tasks.signPom {
        dependsOn tasks.generatePomFileForMavenJavaPublication
    }
}

nexusStaging {
    packageGroup 'ch.sourcepond'
}

// Upload artifacts to remote Maven repository
afterReleaseBuild.dependsOn publish

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.0.0'
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
        classpath 'gradle.plugin.com.github.lburgazzoli:gradle-karaf-plugin:0.1.1'
    }
}